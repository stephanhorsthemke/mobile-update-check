// Code generated by protoc-gen-go. DO NOT EDIT.
// source: updatecheck.proto

/*
Package updatecheck is a generated protocol buffer package.

It is generated from these files:
	updatecheck.proto

It has these top-level messages:
	UpdateVersion
	UpdateAction
*/
package updatecheck

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MyAction int32

const (
	MyAction_NONE   MyAction = 0
	MyAction_ADVICE MyAction = 1
	MyAction_FORCE  MyAction = 2
)

var MyAction_name = map[int32]string{
	0: "NONE",
	1: "ADVICE",
	2: "FORCE",
}
var MyAction_value = map[string]int32{
	"NONE":   0,
	"ADVICE": 1,
	"FORCE":  2,
}

func (x MyAction) String() string {
	return proto.EnumName(MyAction_name, int32(x))
}
func (MyAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UpdateVersion struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateVersion) Reset()                    { *m = UpdateVersion{} }
func (m *UpdateVersion) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersion) ProtoMessage()               {}
func (*UpdateVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpdateVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateAction struct {
	Action MyAction `protobuf:"varint,1,opt,name=action,enum=MyAction" json:"action,omitempty"`
}

func (m *UpdateAction) Reset()                    { *m = UpdateAction{} }
func (m *UpdateAction) String() string            { return proto.CompactTextString(m) }
func (*UpdateAction) ProtoMessage()               {}
func (*UpdateAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateAction) GetAction() MyAction {
	if m != nil {
		return m.Action
	}
	return MyAction_NONE
}

func init() {
	proto.RegisterType((*UpdateVersion)(nil), "UpdateVersion")
	proto.RegisterType((*UpdateAction)(nil), "UpdateAction")
	proto.RegisterEnum("MyAction", MyAction_name, MyAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UpdateCheck service

type UpdateCheckClient interface {
	VersionCheck(ctx context.Context, in *UpdateVersion, opts ...grpc.CallOption) (*UpdateAction, error)
}

type updateCheckClient struct {
	cc *grpc.ClientConn
}

func NewUpdateCheckClient(cc *grpc.ClientConn) UpdateCheckClient {
	return &updateCheckClient{cc}
}

func (c *updateCheckClient) VersionCheck(ctx context.Context, in *UpdateVersion, opts ...grpc.CallOption) (*UpdateAction, error) {
	out := new(UpdateAction)
	err := grpc.Invoke(ctx, "/UpdateCheck/VersionCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateCheck service

type UpdateCheckServer interface {
	VersionCheck(context.Context, *UpdateVersion) (*UpdateAction, error)
}

func RegisterUpdateCheckServer(s *grpc.Server, srv UpdateCheckServer) {
	s.RegisterService(&_UpdateCheck_serviceDesc, srv)
}

func _UpdateCheck_VersionCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateCheckServer).VersionCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UpdateCheck/VersionCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateCheckServer).VersionCheck(ctx, req.(*UpdateVersion))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UpdateCheck",
	HandlerType: (*UpdateCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VersionCheck",
			Handler:    _UpdateCheck_VersionCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updatecheck.proto",
}

func init() { proto.RegisterFile("updatecheck.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2d, 0x48, 0x49,
	0x2c, 0x49, 0x4d, 0xce, 0x48, 0x4d, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe4,
	0xe2, 0x0d, 0x05, 0x0b, 0x86, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x09, 0x49, 0x70, 0xb1, 0x97,
	0x41, 0x98, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92, 0x21, 0x17, 0x0f, 0x44,
	0xa9, 0x63, 0x72, 0x09, 0x48, 0xa5, 0x22, 0x17, 0x5b, 0x22, 0x98, 0x05, 0x56, 0xc8, 0x67, 0xc4,
	0xa9, 0xe7, 0x5b, 0x09, 0x91, 0x0a, 0x82, 0x4a, 0x68, 0x69, 0x73, 0x71, 0xc0, 0xc4, 0x84, 0x38,
	0xb8, 0x58, 0xfc, 0xfc, 0xfd, 0x5c, 0x05, 0x18, 0x84, 0xb8, 0xb8, 0xd8, 0x1c, 0x5d, 0xc2, 0x3c,
	0x9d, 0x5d, 0x05, 0x18, 0x85, 0x38, 0xb9, 0x58, 0xdd, 0xfc, 0x83, 0x9c, 0x5d, 0x05, 0x98, 0x8c,
	0xec, 0xb8, 0xb8, 0x21, 0xe6, 0x3b, 0x83, 0xdc, 0x27, 0xa4, 0xcf, 0xc5, 0x03, 0x75, 0x13, 0x84,
	0xcf, 0xa7, 0x87, 0xe2, 0x50, 0x29, 0x5e, 0x3d, 0x64, 0xd7, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x7d,
	0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x1e, 0x14, 0xbe, 0xe6, 0x00, 0x00, 0x00,
}
